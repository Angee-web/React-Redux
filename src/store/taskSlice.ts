
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// define the Task interface
interface Task {
  id: number;
  description: string;
  isDone: boolean;
}

// define the TasksState interface
interface TasksState {
  tasks: Task[];
  filter: "all" | "done" | "notDone";
}

// define the initial state using the TasksState interface
const initialState: TasksState = {
  tasks: [],
  filter: "all",
};

// create the tasksSlice
const tasksSlice = createSlice({
  name: "tasks",
  initialState,
  reducers: {
    // addTask action
    addTask: (state, action: PayloadAction<{ description: string }>) => {
      const newTask: Task = {
        // generate a unique id using Date.now()
        id: Date.now(),
        description: action.payload.description,
        isDone: false,
      };
      state.tasks.push(newTask);
    },
    // toggleTask action
    toggleTask: (state, action: PayloadAction<{ id: number }>) => {
      const task = state.tasks.find
      ((task) => task.id === action.payload.id);
    //   check if the task exists
      if (task) {
        // toggle the isDone property to the opposite value using the not operator when the task is clicked
        task.isDone = !task.isDone;
      }
    },
    // editTask action
    editTask: (
      state,
      action: PayloadAction<{ id: number; description: string }>
    ) => {
      const task = state.tasks.find((task) => task.id === action.payload.id);
      if (task) {
        // update the description of the task
        task.description = action.payload.description;
      }
    },
    // setFilter action
    setFilter: (state, action: PayloadAction<"all" | "done" | "notDone">) => {
      state.filter = action.payload;
    },
  },
});

// export the actions generated by createSlice
export const { addTask, toggleTask, editTask, setFilter } = tasksSlice.actions;

// export the reducer
export default tasksSlice.reducer;
